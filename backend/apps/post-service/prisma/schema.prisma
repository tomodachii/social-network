generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client/post"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb://@localhost:27017?authSource=admin"
}

enum ReactType {
  Love
  Like
  Haha
  Wow
  Sad
  Angry
  Care
}

enum AttachmentType {
  Image
  Video
  Document
}

enum PostMode {
  Privacy
  Public
  OnlyMe
  Friends
  FriendsOfFriends
}

model ReactRecord {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  type          ReactType
  userId        String
  ownerId       String        @db.ObjectId
  postRecord    PostRecord    @relation(name: "ReactPost", fields: [ownerId], references: [id])
  commentRecord CommentRecord @relation(name: "ReactComment", fields: [ownerId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([userId, ownerId, type])
  @@map("react")
}

model AttachmentRecord {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  name          String
  description   String
  size          Int
  type          AttachmentType
  ownerId       String         @db.ObjectId
  CommentRecord CommentRecord? @relation(name: "AttachmentComment", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PostRecord    PostRecord?    @relation(name: "AttachmentPost", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("attachment")
}

model CommentRecord {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  content        String
  userId         String
  replyTo        String             @db.ObjectId
  attachments    AttachmentRecord[] @relation("AttachmentComment")
  replyToComment CommentRecord      @relation(name: "ReplyComment", fields: [replyTo], references: [id], onUpdate: NoAction, onDelete: NoAction)
  replies        CommentRecord[]    @relation("ReplyComment")
  reacts         ReactRecord[]      @relation("ReactComment")
  post           PostRecord?        @relation(name: "CommentPost", fields: [replyTo], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("comment")
}

model PostRecord {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  version        Int                @default(0)
  content        String
  originalPost   PostRecord?        @relation(name: "SharePost", fields: [originalPostId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  originalPostId String?            @db.ObjectId
  sharePost      PostRecord[]       @relation(name: "SharePost")
  mode           PostMode
  userId         String
  attachments    AttachmentRecord[] @relation("AttachmentPost")
  comments       CommentRecord[]    @relation("CommentPost")
  reacts         ReactRecord[]      @relation("ReactPost")

  @@map("post")
}

model UserRecord {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  version      Int      @default(0)
  firstName    String
  lastName     String
  avatarFileId String?

  @@map("user")
}
